<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://camel.apache.org/schema/spring
        http://camel.apache.org/schema/spring/camel-spring.xsd">

    <context:annotation-config />
    
    <bean name="propertiesURI" class="java.lang.System"
        factory-method="getProperty">
        <constructor-arg index="0" value="config.properties.uri" />
        <constructor-arg index="1" value="classpath:config.properties" />
    </bean>
    
    <bean id="bridgePropertyPlaceholder" class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
        <property name="location" ref="propertiesURI"/>
    </bean>
    
    <bean id="injectedCdrVersion" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="edu.unc.lib.boxc.model.api.SoftwareAgentConstants.setCdrVersion" />
        <property name="arguments">
            <list>
                <value>5.0</value>
            </list>
        </property>
    </bean>
    
    <bean id="fcrepoClientFactory" class="edu.unc.lib.boxc.fcrepo.utils.FcrepoClientFactory" factory-method="factory">
        <constructor-arg value="${fcrepo.baseUrl}" />
        <constructor-arg value="${fcrepo.auth.host}" />
        <constructor-arg value="${fcrepo.auth.user}" />
        <constructor-arg value="${fcrepo.auth.password}" />
    </bean>
    
    <bean id="fcrepoClient" class="org.fcrepo.client.FcrepoClient"
            factory-bean="fcrepoClientFactory" factory-method="makeClient">
    </bean>

    <bean id="ldpContainerFactory" class="edu.unc.lib.boxc.model.fcrepo.services.LdpContainerFactory">
        <property name="client" ref="fcrepoClient" />
    </bean>
    
    <bean id="premisLoggerFactory" class="edu.unc.lib.boxc.operations.impl.events.PremisLoggerFactoryImpl">
        <property name="pidMinter" ref="repositoryPIDMinter" />
        <property name="repoObjLoader" ref="repositoryObjectLoader" />
        <property name="repoObjFactory" ref="repositoryObjectFactory" />
        <property name="binaryTransferService" ref="binaryTransferService" />
    </bean>
    
    <bean id="repositoryPIDMinter" class="edu.unc.lib.boxc.model.fcrepo.ids.RepositoryPIDMinter"></bean>

    <bean id="fedoraSparqlUpdateService" class="edu.unc.lib.boxc.fcrepo.utils.FedoraSparqlUpdateService">
        <property name="fcrepoClient" ref="fcrepoClient" />
    </bean>

    <bean id="repositoryObjectFactory" class="edu.unc.lib.boxc.model.fcrepo.services.RepositoryObjectFactoryImpl">
        <property name="client" ref="fcrepoClient" />
        <property name="ldpFactory" ref="ldpContainerFactory" />
        <property name="pidMinter" ref="repositoryPIDMinter" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="sparqlUpdateService" ref="fedoraSparqlUpdateService" />
    </bean>

    <bean id="repositoryObjectDriver" class="edu.unc.lib.boxc.model.fcrepo.services.RepositoryObjectDriver">
        <property name="client" ref="fcrepoClient" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="pidMinter" ref="repositoryPIDMinter" />
        <property name="sparqlQueryService" ref="sparqlQueryService" />
    </bean>
    
    <bean id="repositoryObjectLoader" class="edu.unc.lib.boxc.model.fcrepo.services.RepositoryObjectLoaderImpl" init-method="init">
        <property name="repositoryObjectCacheLoader" ref="repositoryObjectCacheLoader" />
        <property name="cacheTimeToLive" value="${cache.contentPath.timeToLive}" />
        <property name="cacheMaxSize" value="${cache.contentPath.maxSize}" />
    </bean>
    
    <bean id="repositoryObjectLoaderNoCache" class="edu.unc.lib.boxc.model.fcrepo.services.RepositoryObjectLoaderImpl" init-method="init">
        <property name="repositoryObjectCacheLoader" ref="repositoryObjectCacheLoader" />
        <property name="cacheTimeToLive" value="0" />
        <property name="cacheMaxSize" value="0" />
    </bean>
    
    <bean id="repositoryObjectCacheLoader" class="edu.unc.lib.boxc.model.fcrepo.objects.RepositoryObjectCacheLoader">
        <property name="client" ref="fcrepoClient" />
        <property name="repositoryObjectDriver" ref="repositoryObjectDriver" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
    </bean>
    
    <!-- ACL related beans -->
    <bean id="httpClientConnectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager"
            destroy-method="shutdown">
    </bean>
    
    <bean id="sparqlQueryService" class="edu.unc.lib.boxc.model.fcrepo.sparql.FusekiSparqlQueryServiceImpl">
        <property name="fusekiQueryURL" value="${fuseki.baseUri}" />
    </bean>
    
    <bean id="contentPathFactory" class="edu.unc.lib.boxc.model.fcrepo.services.ContentPathFactoryImpl"
            init-method="init">
        <property name="cacheMaxSize" value="${cache.contentPath.maxSize}" />
        <property name="cacheTimeToLive" value="${cache.contentPath.timeToLive}" />
        <property name="fcrepoClient" ref="fcrepoClient" />
    </bean>
    
    <bean id="objectAclFactory" class="edu.unc.lib.boxc.auth.fcrepo.services.ObjectAclFactory"
            init-method="init">
        <property name="cacheMaxSize" value="${cache.objectAcls.maxSize}" />
        <property name="cacheTimeToLive" value="${cache.objectAcls.timeToLive}" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
    </bean>
    
    <bean id="inheritedPermissionEvaluator" class="edu.unc.lib.boxc.auth.fcrepo.services.InheritedPermissionEvaluator">
        <property name="pathFactory" ref="contentPathFactory" />
        <property name="objectAclFactory" ref="objectAclFactory" />
    </bean>
    
    <bean id="inheritedAclFactory" class="edu.unc.lib.boxc.auth.fcrepo.services.InheritedAclFactory">
        <property name="objectAclFactory" ref="objectAclFactory" />
        <property name="pathFactory" ref="contentPathFactory" />
    </bean>
    
    <bean name="aclPropertiesURI" class="java.lang.System"
            factory-method="getProperty">
        <constructor-arg index="0" value="acl.properties.uri" />
    </bean>

    <bean id="aclProperties"
        class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <ref bean="aclPropertiesURI" />
            </list>
        </property>
        <property name="ignoreResourceNotFound" value="false" />
    </bean>
    
    <bean id="globalPermissionEvaluator" class="edu.unc.lib.boxc.auth.fcrepo.services.GlobalPermissionEvaluatorImpl">
        <constructor-arg ref="aclProperties" />
    </bean>
    
    <bean id="aclService" class="edu.unc.lib.boxc.auth.fcrepo.services.AccessControlServiceImpl">
        <property name="globalPermissionEvaluator" ref="globalPermissionEvaluator" />
        <property name="permissionEvaluator" ref="inheritedPermissionEvaluator" />
    </bean>
    
    <!-- External storage manager -->
    <bean id="binaryTransferService" class="edu.unc.lib.boxc.persist.impl.transfer.BinaryTransferServiceImpl">
        <property name="storageLocationManager" ref="storageLocationManager" />
    </bean>
    
    <bean id="storageLocationManager" class="edu.unc.lib.boxc.persist.impl.storage.StorageLocationManagerImpl"
            init-method="init">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="pathFactory" ref="contentPathFactory" />
        <property name="configPath" value="${storageLocations.path}" />
        <property name="mappingPath" value="${storageLocationMappings.path}" />
    </bean>
    
    <!-- JMS messaging -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="pooledAmqConnectionFactory" />
        <property name="defaultDestinationName" value="${cdr.stream}" />
        <property name="pubSubDomain" value="false" />
    </bean>

    <bean id="solrUpdateJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="pooledAmqConnectionFactory" />
        <property name="defaultDestinationName" value="${cdr.solrupdate.stream}" />
        <property name="pubSubDomain" value="false" />
    </bean>
    
    <bean id="abstractMessageSender" class="edu.unc.lib.boxc.operations.jms.MessageSender" abstract="true" >
        <property name="jmsTemplate" ref="solrUpdateJmsTemplate" />
    </bean>
    
    <bean id="indexingMessageSender" parent="abstractMessageSender"
        class="edu.unc.lib.boxc.operations.jms.indexing.IndexingMessageSender">
    </bean>

    <!-- Processors -->
    <bean id="cdrEventProcessor" class="edu.unc.lib.boxc.services.camel.cdrEvents.CdrEventProcessor">
    </bean>

    <bean id="binaryEnhancementProcessor" class="edu.unc.lib.boxc.services.camel.BinaryEnhancementProcessor">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
    </bean>
    
    <bean id="binaryMetadataProcessor" class="edu.unc.lib.boxc.services.camel.BinaryMetadataProcessor">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="derivativeService" ref="derivativeService" />
    </bean>
    
    <bean id="cacheInvalidatingProcessor" class="edu.unc.lib.boxc.services.camel.util.CacheInvalidatingProcessor">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="objectAclFactory" ref="objectAclFactory" />
        <property name="contentPathFactory" ref="contentPathFactory" />
        <property name="titleRetrievalService" ref="titleRetrievalService" />
        <property name="memberOrderService" ref="memberOrderService" />
    </bean>
    
    <bean id="addAccessCopyProcessor" class="edu.unc.lib.boxc.services.camel.images.AddDerivativeProcessor">
        <constructor-arg value="#{T(edu.unc.lib.boxc.model.api.DatastreamType).JP2_ACCESS_COPY.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.jp2}" />
    </bean>

    <bean id="addFullTextDerivativeProcessor" class="edu.unc.lib.boxc.services.camel.images.AddDerivativeProcessor">
        <constructor-arg value="#{T(edu.unc.lib.boxc.model.api.DatastreamType).FULLTEXT_EXTRACTION.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.fulltext}" />
    </bean>
    
    <bean id="fulltextProcessor" class="edu.unc.lib.boxc.services.camel.fulltext.FulltextProcessor">
        <constructor-arg value="${cdr.enhancement.path.fulltext}" />
    </bean>

    <bean id="addAudioAccessCopyProcessor" class="edu.unc.lib.boxc.services.camel.images.AddDerivativeProcessor">
        <constructor-arg value="#{T(edu.unc.lib.boxc.model.api.DatastreamType).AUDIO_ACCESS_COPY.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.audio}" />
    </bean>

    <bean id="audioAccessCopyProcessor" class="edu.unc.lib.boxc.services.camel.audio.AudioDerivativeProcessor">
    </bean>

    <bean id="destroyedMsgProcessor" class="edu.unc.lib.boxc.services.camel.destroyDerivatives.DestroyedMsgProcessor">
        <property name="jp2BasePath" value="${cdr.enhancement.path.jp2}" />
    </bean>

    <bean id="destroyCollectionSrcImgProcessor" class="edu.unc.lib.boxc.services.camel.destroyDerivatives.DestroyDerivativesProcessor">
        <constructor-arg value="" />
        <constructor-arg value="${sourceImages.dir}" />
    </bean>

    <bean id="destroyAccessCopyProcessor" class="edu.unc.lib.boxc.services.camel.destroyDerivatives.DestroyDerivativesProcessor">
        <constructor-arg value="#{T(edu.unc.lib.boxc.model.api.DatastreamType).JP2_ACCESS_COPY.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.jp2}" />
    </bean>

    <bean id="destroyFulltextProcessor" class="edu.unc.lib.boxc.services.camel.destroyDerivatives.DestroyDerivativesProcessor">
        <constructor-arg value="#{T(edu.unc.lib.boxc.model.api.DatastreamType).FULLTEXT_EXTRACTION.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.fulltext}" />
    </bean>

    <bean id="destroyAudioProcessor" class="edu.unc.lib.boxc.services.camel.destroyDerivatives.DestroyDerivativesProcessor">
        <constructor-arg value="#{T(edu.unc.lib.boxc.model.api.DatastreamType).AUDIO_ACCESS_COPY.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.audio}" />
    </bean>
    
    <bean id="indexingMessageProcessor" class="edu.unc.lib.boxc.services.camel.triplesReindexing.IndexingMessageProcessor">
    </bean>

    <bean id="importMemberOrderJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="pooledAmqConnectionFactory" />
        <property name="defaultDestinationName" value="${cdr.ordermembers.stream}" />
        <property name="pubSubDomain" value="false" />
    </bean>

    <bean id="memberOrderRequestSender" class="edu.unc.lib.boxc.operations.jms.order.MemberOrderRequestSender">
        <property name="jmsTemplate" ref="importMemberOrderJmsTemplate"/>
    </bean>
    
    <bean id="destroyObjectsProcessor" class="edu.unc.lib.boxc.services.camel.destroy.DestroyObjectsProcessor">
        <property name="aclService" ref="aclService" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="transactionManager" ref="transactionManager" />
        <property name="objectPathFactory" ref="pathFactory" />
        <property name="fcrepoClient" ref="fcrepoClient" />
        <property name="inheritedAclFactory" ref="inheritedAclFactory" />
        <property name="storageLocationManager" ref="storageLocationManager" />
        <property name="binaryTransferService" ref="binaryTransferService" />
        <property name="indexingMessageSender" ref="indexingMessageSender" />
        <property name="binaryDestroyedMessageSender" ref="binaryDestroyedMessageSender" />
        <property name="premisLoggerFactory" ref="premisLoggerFactory" />
        <property name="memberOrderRequestSender" ref="memberOrderRequestSender" />
    </bean>
    
    <bean id="fcrepo" class="org.fcrepo.camel.FcrepoComponent">
        <property name="authUsername" value="${fcrepo.auth.user}"/>
        <property name="authPassword" value="${fcrepo.auth.password}"/>
        <property name="authHost" value="${fcrepo.auth.host}"/>
        <property name="baseUrl" value="${fcrepo.baseUrl}"/>
    </bean>
    
    <bean id="transactionManager" class="edu.unc.lib.boxc.fcrepo.utils.TransactionManager">
        <property name="client" ref="fcrepoClient" />
        <property name="binaryTransferService" ref="binaryTransferService" />
    </bean>
    
    <!-- XML Import dependencies -->
    
    <bean id="mustacheCompiler" class="com.samskivert.mustache.Mustache" factory-method="compiler"/>

    <bean id="updateCompleteTemplate" factory-bean="mustacheCompiler"
        factory-method="compile">
        <constructor-arg>
            <bean class="java.io.InputStreamReader">
                <constructor-arg type="java.io.InputStream"
                    value="classpath:update-complete-html.txt" />
            </bean>
        </constructor-arg>
    </bean>
    
    <bean id="updateFailedTemplate" factory-bean="mustacheCompiler"
        factory-method="compile">
        <constructor-arg>
            <bean class="java.io.InputStreamReader">
                <constructor-arg type="java.io.InputStream"
                    value="classpath:update-failed-html.txt" />
            </bean>
        </constructor-arg>
    </bean>
  
    <bean id="fromAddress" class="java.lang.String">
        <constructor-arg value="${repository.from.email}" />
    </bean>
    
    <bean id="adminAddress" class="java.lang.String">
        <constructor-arg value="${administrator.email}" />
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${smtp.host:localhost}" />
        <property name="port" value="${smtp.port:25}" />
        <property name="defaultEncoding" value="UTF-8" />
    </bean>

    <bean id="operationsMessageSender" class="edu.unc.lib.boxc.operations.jms.OperationsMessageSender">
        <property name="jmsTemplate" ref="jmsTemplate" />
    </bean>
    
    <bean id="schematronValidator" class="edu.unc.lib.boxc.operations.impl.validation.SchematronValidator"
       init-method="loadSchemas">
        <property name="schemas">
            <map>
                <entry key="object-mods"
                    value="classpath:edu/unc/lib/boxc/operations/impl/validation/object-mods.sch" />
                <entry key="vocabularies-mods"
                    value="classpath:edu/unc/lib/boxc/operations/impl/validation/vocabularies-mods.sch" />
            </map>
        </property>
    </bean>
    
    <bean id="schemaFactory" class="edu.unc.lib.boxc.common.xml.SecureXMLFactory"
        factory-method="createSchemaFactory" scope="prototype">
    </bean>

    <bean id="modsSchema" class="edu.unc.lib.boxc.common.xml.SecureXMLFactory"
          factory-method="createSchema">
        <constructor-arg ref="schemaFactory" />
        <constructor-arg>
            <list>
                <value>/schemas/xml.xsd</value>
                <value>/schemas/xlink.xsd</value>
                <value>/schemas/mods-3-8.xsd</value>
            </list>
        </constructor-arg>
    </bean>
    
    <bean id="modsValidator" class="edu.unc.lib.boxc.operations.impl.validation.MODSValidator">
        <property name="schematronValidator" ref="schematronValidator" />
        <property name="modsSchema" ref="modsSchema" />
    </bean>
    
    <bean id="versionedDatastreamService" class="edu.unc.lib.boxc.operations.impl.versioning.VersionedDatastreamService" >
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
        <property name="binaryTransferService" ref="binaryTransferService" />
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="updateDescriptionService" class="edu.unc.lib.boxc.operations.impl.edit.UpdateDescriptionService">
        <property name="aclService" ref="aclService" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
        <property name="operationsMessageSender" ref="operationsMessageSender" />
        <property name="modsValidator" ref="modsValidator" />
        <property name="versionedDatastreamService" ref="versionedDatastreamService" />
    </bean>
    
    <bean id="importXMLProcessor" class="edu.unc.lib.boxc.services.camel.importxml.ImportXMLProcessor">
        <property name="updateService" ref="updateDescriptionService" />
        <property name="mailSender" ref="mailSender" />
        <property name="updateCompleteTemplate" ref="updateCompleteTemplate" />
        <property name="updateFailedTemplate" ref="updateFailedTemplate" />
        <property name="fromAddress" ref="fromAddress" />
        <property name="adminAddress" ref="adminAddress" />
        <property name="transferService" ref="binaryTransferService" />
        <property name="locationManager" ref="storageLocationManager" />
    </bean>
    
    <bean id="emailHandler" class="edu.unc.lib.boxc.operations.impl.utils.EmailHandler">
        <property name="fromAddress" ref="fromAddress" />
        <property name="mailSender" ref="mailSender" />
    </bean>
    
    <bean id="exportXmlRequestService" class="edu.unc.lib.boxc.operations.jms.exportxml.ExportXMLRequestService" >
    </bean>
    
    <bean id="exportXMLProcessor" class="edu.unc.lib.boxc.services.camel.exportxml.ExportXMLProcessor">
        <property name="emailHandler" ref="emailHandler" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="aclService" ref="aclService" />
        <property name="searchService" ref="queryLayer" />
        <property name="searchStateFactory" ref="searchStateFactory" />
        <property name="requestService" ref="exportXmlRequestService" />
        <property name="objectsPerExport" value="${cdr.exportxml.objectsPerExport:5000}" />
    </bean>
    
    <bean id="longleafAggregationStrategy" class="edu.unc.lib.boxc.services.camel.longleaf.LongleafAggregationStrategy">
    </bean>

    <bean id="getUrisProcessor" class="edu.unc.lib.boxc.services.camel.longleaf.GetUrisProcessor">
    </bean>
    
    <bean id="registerLongleafProcessor" class="edu.unc.lib.boxc.services.camel.longleaf.RegisterToLongleafProcessor">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoaderNoCache" />
        <property name="fcrepoClient" ref="fcrepoClient" />
        <property name="longleafBaseCommand" value="${longleaf.baseCommand}" />
        <property name="registrationSuccessfulEndpoint" value="${cdr.registration.successful.dest}" />
    </bean>
    
    <bean id="binaryDestroyedJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="pooledAmqConnectionFactory" />
        <property name="defaultDestinationName" value="${cdr.destroy.post.stream}" />
        <property name="pubSubDomain" value="false" />
    </bean>
    
    <bean id="binaryDestroyedMessageSender" class="edu.unc.lib.boxc.operations.jms.MessageSender">
        <property name="jmsTemplate" ref="binaryDestroyedJmsTemplate" />
    </bean>
    
    <bean id="deregisterLongleafProcessor" class="edu.unc.lib.boxc.services.camel.longleaf.DeregisterLongleafProcessor">
        <property name="longleafBaseCommand" value="${longleaf.baseCommand}" />
    </bean>

    <bean id="expireEmbargoService" class="edu.unc.lib.boxc.operations.impl.acl.ExpireEmbargoService">
        <property name="sparqlQueryService" ref="sparqlQueryService" />
        <property name="transactionManager" ref="transactionManager" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
        <property name="operationsMessageSender" ref="operationsMessageSender" />
        <property name="premisLoggerFactory" ref="premisLoggerFactory" />
    </bean>
    
    <bean id="binaryCleanupProcessor" class="edu.unc.lib.boxc.services.camel.binaryCleanup.BinaryCleanupProcessor">
        <property name="storageLocationManager" ref="storageLocationManager" />
        <property name="binaryTransferService" ref="binaryTransferService" />
    </bean>
    
    <bean id="patronAccessAssignmentService" class="edu.unc.lib.boxc.operations.impl.acl.PatronAccessAssignmentService">
        <property name="aclService" ref="aclService" />
        <property name="operationsMessageSender" ref="operationsMessageSender" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="transactionManager" ref="transactionManager" />
        <property name="premisLoggerFactory" ref="premisLoggerFactory" />
    </bean>

    <bean id="patronAccessAssignmentProcessor" class="edu.unc.lib.boxc.services.camel.patronAccess.PatronAccessAssignmentProcessor">
        <property name="patronAccessAssignmentService" ref="patronAccessAssignmentService" />
    </bean>

    <!-- member ordering -->
    <bean id="orderJobFactory" class="edu.unc.lib.boxc.operations.impl.order.OrderJobFactory">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
    </bean>

    <bean id="pcdmMembershipService" class="edu.unc.lib.boxc.model.fcrepo.services.PcdmMembershipService">
        <property name="sparqlQueryService" ref="sparqlQueryService" />
    </bean>

    <bean id="orderValidatorFactory" class="edu.unc.lib.boxc.operations.impl.order.OrderValidatorFactory">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="membershipService" ref="pcdmMembershipService" />
    </bean>

    <bean id="orderNotificationBuilder" class="edu.unc.lib.boxc.services.camel.order.OrderNotificationBuilder">
    </bean>

    <bean id="orderNotificationService" class="edu.unc.lib.boxc.services.camel.order.OrderNotificationService">
        <property name="emailHandler" ref="emailHandler" />
        <property name="orderNotificationBuilder" ref="orderNotificationBuilder" />
    </bean>

    <bean id="orderRequestProcessor" class="edu.unc.lib.boxc.services.camel.order.OrderRequestProcessor">
        <property name="accessControlService" ref="aclService" />
        <property name="indexingMessageSender" ref="indexingMessageSender" />
        <property name="orderJobFactory" ref="orderJobFactory" />
        <property name="orderValidatorFactory" ref="orderValidatorFactory" />
        <property name="orderNotificationService" ref="orderNotificationService" />
    </bean>

    <bean id="thumbnailRequestProcessor" class="edu.unc.lib.boxc.services.camel.thumbnails.ThumbnailRequestProcessor">
        <property name="aclService" ref="aclService" />
        <property name="indexingMessageSender" ref="indexingMessageSender" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
    </bean>

    <bean id="importThumbnailRequestProcessor" class="edu.unc.lib.boxc.services.camel.thumbnails.ImportThumbnailRequestProcessor">
    </bean>

    <bean id="viewSettingRequestProcessor" class="edu.unc.lib.boxc.services.camel.viewSettings.ViewSettingRequestProcessor">
        <property name="accessControlService" ref="aclService" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
        <property name="indexingMessageSender" ref="indexingMessageSender" />
    </bean>

    <bean id="enhancementsJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="pooledAmqConnectionFactory" />
        <property name="defaultDestinationName" value="${cdr.enhancement.stream}" />
        <property name="pubSubDomain" value="false" />
    </bean>

    <bean id="runEnhancementMessageSender" class="edu.unc.lib.boxc.operations.jms.MessageSender">
        <property name="jmsTemplate" ref="enhancementsJmsTemplate"/>
    </bean>

    <bean id="accessSurrogateRequestProcessor" class="edu.unc.lib.boxc.services.camel.accessSurrogates.AccessSurrogateRequestProcessor">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="accessControlService" ref="aclService" />
        <property name="derivativeService" ref="derivativeService" />
        <property name="messageSender" ref="runEnhancementMessageSender" />
    </bean>

    <bean id="imageCacheInvalidationProcessor" class="edu.unc.lib.boxc.services.camel.images.ImageCacheInvalidationProcessor"
            destroy-method="destroy">
        <property name="connectionManager" ref="httpClientConnectionManager" />
        <property name="imageServerBasePath" value="${image.server.base.path}" />
        <property name="imageServerUsername" value="${image.server.username}" />
        <property name="imageServerPassword" value="${image.server.password}" />
    </bean>

    <bean id="streamingPropertiesRequestProcessor" class="edu.unc.lib.boxc.services.camel.streaming.StreamingPropertiesRequestProcessor">
        <property name="aclService" ref="aclService" />
        <property name="indexingMessageSender" ref="indexingMessageSender" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
    </bean>

    <!-- Camel contexts -->

    <camel:camelContext id="boxcCamelContext">
        <camel:package>org.fcrepo.camel.indexing.triplestore</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.triplesReindexing</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.cdrEvents</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.longleaf</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.enhancements</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.images</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.fulltext</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.audio</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.solr</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.binaryCleanup</camel:package>
        <!-- Initialize metaServicesRouter after the routes it depends on -->
        <camel:package>edu.unc.lib.boxc.services.camel.routing</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.importxml</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.exportxml</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.destroy</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.destroyDerivatives</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.patronAccess</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.order</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.thumbnails</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.viewSettings</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.accessSurrogates</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.solrUpdate</camel:package>
        <camel:package>edu.unc.lib.boxc.services.camel.streaming</camel:package>
    </camel:camelContext>
</beans>